---

- hosts: all
  vars:
    - my_home: "/home/bp"
    - anaconda_installer: "Miniconda2-latest-Linux-x86_64.sh"
  tasks:
    - name: Update All Packages
      become: yes
      dnf:
        name: "*"
        state: latest

    - name: Microsoft vscode; Add Yum Repository
      become: yes
      yum_repository:
        name: code
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        gpgcheck: yes
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc
    
    - name: Install Packages
      become: yes
      dnf:
        name: "{{ item }}"
        state: latest
      loop:
        - code
        - docker
        - meld
        - nodejs
        - sqlitebrowser
        - gimp
        - inkscape
        # Security Compliance Scan Your Apps
        - openscap-utils
      
    - name: Install Amazon Web Services (AWS) Command Line Utility (CLI)
      # Note: Installs to Virtual Environment Due to Ansible Running in Virtual Environment
      pip:
        name: awscli
        executable: pip3
        extra_args: --upgrade

    # Required to build heclib/HEC-DSS
    - name: Packages to Build DSS
      become: yes
      dnf:
        name: "{{ item }}"
        state: latest
      loop:     
        - gcc
        - gcc-c++
        - gcc-gfortran
        - make
        - zlib-devel
        - java-1.8.0-openjdk-devel
      tags:
        - never
        - dss

    # Docker Postinstall
    # https://docs.docker.com/install/linux/linux-postinstall/
    #
    - name: Docker; Create the docker group
      become: yes
      group:
        name: docker
        state: present

    - name: Docker; Add my login to docker group
      become: yes
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
    
    - name: Docker; Start on boot
      become: yes 
      systemd:
        name: docker
        enabled: yes
        state: reloaded

    # Equivalent of:
    # curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" \
    # -o /usr/local/bin/docker-compose
    #
    - name: docker-compose; Install
      become: yes
      get_url:
        url: https://github.com/docker/compose/releases/download/1.23.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 0755
  
   # Install vscode Extensions: https://code.visualstudio.com/docs/editor/extension-gallery#_command-line-extension-management
    - name: Microsoft vscode; Install Extensions
      shell: "code --install-extension {{ item }}"
      loop:
        - "ms-python.python"
        - "ms-azuretools.vscode-docker"
        - "lextudio.restructuredtext"
        - "joshpeng.sublime-babel-vscode"
        - "esbenp.prettier-vscode"

#   # Miniconda and Conda Package Install (Work in Progress; Portions Commented)
#   # Until Complete, run the following commands after running playbook
#   # and follow prompts:
#       
#       cd $HOME && bash ./Miniconda2-latest-Linux-x86_64.sh
#       source ~/miniconda2/bin/activate
#       conda install -c conda-forge libgdal
#       conda install -c conda-forge gdal
#       
    - name: miniconda; Download Installer
      get_url:
        url: https://repo.anaconda.com/miniconda/{{ anaconda_installer }}
        dest: "{{ my_home }}/{{ anaconda_installer }}"
        mode: 0700
      tags:
        - never
        - miniconda

    - name: miniconda; Run Installer
      shell: "{{ my_home }}/{{ anaconda_installer }}"
      args:
        chdir: "{{ my_home }}"
        executable: /bin/bash
      tags:
        - never
        - miniconda

    - name: Packages for conda-forge
      become: yes
      dnf:
        name: "{{ item }}"
        state: latest
      loop:     
        # Required for gdal conda-forge package
        # https://github.com/AppImage/pkg2appimage/issues/336
        - libnsl
        - libgfortran
      tags:
        - never
        - miniconda

    - name: miniconda; Install Conda Packages
      shell: |
        source {{ my_home }}/miniconda2/bin/activate
        yes | conda install -c conda-forge "{{ item }}"
      args:
        executable: /bin/bash
      loop:
        - gdal
      tags:
        - never
        - miniconda

    # Conda Python Environment (pip install)
    - name: miniconda2 Python Packages (pip)
      pip:
        virtualenv: "{{ my_home }}/miniconda2"
        name: "{{ item }}"
      loop:
        - pylint
      tags:
        - never
        - miniconda

# Directories to emulate cpc-cwms2 environment
    - name: cpc-cwms2 environment; directories
      file:
        state: directory
        path: "{{ item }}"
      with_items:
        - "{{ my_home }}/cwmsgrid"
      tags:
        - never
        - cpc

# Symlinks to emulate cpc-cwms2 environment
    - name: cpc-cwms2 environment; symlinks
      become: yes
      file:
        state: link
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
      with_items:
        - { src: "{{ my_home }}", dest: "/netapp" }
        - { src: "{{ my_home }}/projects/cumulus", dest: "/netapp/cwmsgrid/software" }
      tags:
        - never
        - cpc

    - name: QGIS; Enable QGIS LTR Repository
      become: yes
      shell: yes | dnf copr enable dani/qgis-ltr
      tags:
        - qgis
      # yum_repository:
      #   name: dani-qgis
      #   file: "_copr:copr.fedorainfracloud.org:dani:qgis"
      #   baseurl: "https://copr-be.cloud.fedoraproject.org/results/dani/qgis/fedora-$releasever-$basearch/"
      #   skip_if_unavailable: yes
      #   gpgcheck: yes
      #   gpgkey: "https://copr-be.cloud.fedoraproject.org/results/dani/qgis/pubkey.gpg"
      #   repo_gpgcheck: no
      #   enabled: yes

    - name: QGIS; Install QGIS
      # https://qgis.org/en/site/forusers/alldownloads.html#qgis-ltr-long-term-release
      become: yes
      dnf:
        name: qgis, python3-qgis, qgis-grass
        state: latest
        enable_plugin: copr
      tags:
        - qgis
...

